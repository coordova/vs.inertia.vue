/* app\Http\Controllers\Admin\SurveyController.php */
<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Http\Requests\StoreSurveyRequest;
use App\Http\Requests\UpdateSurveyRequest;
use App\Http\Resources\SurveyResource;
use App\Models\Survey;
use Illuminate\Http\Request;
use Illuminate\Http\RedirectResponse;
use Inertia\Inertia;
use Inertia\Response;

class SurveyController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index(Request $request): Response
    {
        // Carga la categoría para mostrarla en la lista
        $surveys = Survey::with(['category'])
                       ->orderBy('created_at', 'desc')
                       ->paginate($request->get('per_page', 15));

        // Opcional: Agregar búsqueda o filtrado por categoría
        // $categoryId = $request->get('category_id');
        // if ($categoryId) {
        //     $surveys = $surveys->where('category_id', $categoryId);
        // }

        return Inertia::render('Admin/Surveys/Index', [
            'surveys' => SurveyResource::collection($surveys),
            'filters' => $request->only(['search', 'category_id', 'per_page']), // Ejemplo de filtro por categoría
        ]);
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create(): Response
    {
        // Puedes pasar datos auxiliares si es necesario (por ejemplo, lista de categorías)
        // $categories = Category::all(); // Asumiendo un modelo Category
        return Inertia::render('Admin/Surveys/Create');
        // O si necesitas categorías:
        // return Inertia::render('Admin/Surveys/Create', ['categories' => CategoryResource::collection($categories)]);
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(StoreSurveyRequest $request): RedirectResponse
    {
        $survey = Survey::create($request->validated());

        // Opcional: Cargar relación si se necesita en la redirección
        // $survey->load('category');

        return to_route('admin.surveys.index')->with('success', 'Survey created successfully.');
    }

    /**
     * Display the specified resource.
     */
    public function show(Survey $survey): Response
    {
        $survey->load(['category', 'characters', 'votes']); // Carga relacional según sea necesario
        return Inertia::render('Admin/Surveys/Show', [
            'survey' => new SurveyResource($survey),
        ]);
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(Survey $survey): Response
    {
        // Puedes pasar datos auxiliares si es necesario (por ejemplo, lista de categorías)
        // $categories = Category::all();
        return Inertia::render('Admin/Surveys/Edit', [
            'survey' => new SurveyResource($survey),
            // 'categories' => CategoryResource::collection($categories), // Si se necesita en edición
        ]);
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(UpdateSurveyRequest $request, Survey $survey): RedirectResponse
    {
        $survey->update($request->validated());

        // Opcional: Recargar relación si cambió
        // $survey->load('category');

        return to_route('admin.surveys.index')->with('success', 'Survey updated successfully.');
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(Survey $survey): RedirectResponse
    {
        $survey->delete(); // Soft Delete

        return to_route('admin.surveys.index')->with('success', 'Survey deleted successfully.');
    }
}

/* app\Models\Survey.php */
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\SoftDeletes;

class Survey extends Model
{
    /** @use HasFactory<\Database\Factories\SurveyFactory> */
    use HasFactory, SoftDeletes; // Añadido SoftDeletes

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'category_id',
        'title',
        'slug',
        'description',
        'image',
        'type',
        'status',
        'date_start',
        'date_end',
        'selection_strategy',
        'max_votes_per_user',
        'allow_ties',
        'tie_weight',
        'is_featured',
        'sort_order',
        'counter',
        'meta_title',
        'meta_description',
    ];

    /**
     * The attributes that should be cast.
     *
     * @var array<string, string>
     */
    protected $casts = [
        'category_id' => 'integer',
        'type' => 'integer',
        'status' => 'boolean',
        'date_start' => 'date',
        'date_end' => 'date',
        'max_votes_per_user' => 'integer',
        'allow_ties' => 'boolean',
        'tie_weight' => 'decimal:2',
        'is_featured' => 'boolean',
        'sort_order' => 'integer',
        'counter' => 'integer',
    ];

    // --- Relaciones ---
    public function category(): BelongsTo
    {
        return $this->belongsTo(Category::class);
    }

    public function characters(): BelongsToMany
    {
        return $this->belongsToMany(Character::class, 'character_survey')
                    ->withPivot(['survey_matches', 'survey_wins', 'survey_losses', 'survey_ties', 'is_active', 'sort_order'])
                    ->withTimestamps();
    }

    public function combinatorics(): HasMany
    {
        return $this->hasMany(Combinatoric::class);
    }

    public function votes(): HasMany
    {
        return $this->hasMany(Vote::class);
    }

    public function users(): BelongsToMany
    {
        return $this->belongsToMany(User::class, 'survey_user')
                    ->withPivot(['progress_percentage', 'total_votes', 'completed_at', 'started_at', 'last_activity_at', 'is_completed', 'completion_time'])
                    ->withTimestamps();
    }

    public function surveyUserPivots(): HasMany
    {
        return $this->hasMany(SurveyUser::class, 'survey_id');
    }
}


/* app\Http\Resources\SurveyResource.php */
<?php

namespace App\Http\Resources;

use Illuminate\Http\Request;
use Illuminate\Http\Resources\Json\JsonResource;

class SurveyResource extends JsonResource
{
    /**
     * Transform the resource into an array.
     *
     * @return array<string, mixed>
     */
    public function toArray(Request $request): array
    {
        return [
            'id' => $this->id,
            'category_id' => $this->category_id,
            'category' => new CategoryResource($this->whenLoaded('category')), // Carga condicional
            'title' => $this->title,
            'slug' => $this->slug,
            'description' => $this->description,
            'image' => $this->image,
            'type' => $this->type,
            'status' => $this->status,
            'date_start' => $this->date_start,
            'date_end' => $this->date_end,
            'selection_strategy' => $this->selection_strategy,
            'max_votes_per_user' => $this->max_votes_per_user,
            'allow_ties' => $this->allow_ties,
            'tie_weight' => $this->tie_weight,
            'is_featured' => $this->is_featured,
            'sort_order' => $this->sort_order,
            'counter' => $this->counter,
            'meta_title' => $this->meta_title,
            'meta_description' => $this->meta_description,
            'created_at' => $this->created_at,
            'updated_at' => $this->updated_at,
            // 'deleted_at' => $this->when($this->trashed(), $this->deleted_at),
        ];
    }
}

/* app\Http\Requests\StoreSurveyRequest.php */
<?php

namespace App\Http\Requests;

use Illuminate\Foundation\Http\FormRequest;

class StoreSurveyRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        // Ej: return auth()->user()->type === 1; // Solo admins
        return true; // Ajustar según lógica de autorización
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
     */
    public function rules(): array
    {
        return [
            'category_id' => 'required|exists:categories,id',
            'title' => 'required|string|max:255|unique:surveys,title',
            'slug' => 'required|string|max:255|unique:surveys,slug',
            'description' => 'nullable|string',
            'image' => 'nullable|string|max:255',
            'type' => 'required|integer|in:0,1', // 0=pública, 1=privada
            'status' => 'required|boolean',
            'date_start' => 'required|date|before_or_equal:date_end',
            'date_end' => 'required|date|after_or_equal:date_start',
            'selection_strategy' => 'required|string|max:255',
            'max_votes_per_user' => 'nullable|integer|min:0',
            'allow_ties' => 'required|boolean',
            'tie_weight' => 'required|numeric|min:0|max:1',
            'is_featured' => 'required|boolean',
            'sort_order' => 'nullable|integer|min:0',
            'counter' => 'nullable|integer|min:0',
            'meta_title' => 'nullable|string|max:255',
            'meta_description' => 'nullable|string|max:500',
        ];
    }
}


/* app\Http\Requests\UpdateSurveyRequest.php */
<?php

namespace App\Http\Requests;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

class UpdateSurveyRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        // Ej: return auth()->user()->type === 1; // Solo admins
        return true; // Ajustar según lógica de autorización
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
     */
    public function rules(): array
    {
        $surveyId = $this->route('survey');

        return [
            'category_id' => 'required|exists:categories,id',
            'title' => ['required', 'string', 'max:255', Rule::unique('surveys', 'title')->ignore($surveyId)],
            'slug' => ['required', 'string', 'max:255', Rule::unique('surveys', 'slug')->ignore($surveyId)],
            'description' => 'nullable|string',
            'image' => 'nullable|string|max:255',
            'type' => 'required|integer|in:0,1',
            'status' => 'required|boolean',
            'date_start' => 'required|date|before_or_equal:date_end',
            'date_end' => 'required|date|after_or_equal:date_start',
            'selection_strategy' => 'required|string|max:255',
            'max_votes_per_user' => 'nullable|integer|min:0',
            'allow_ties' => 'required|boolean',
            'tie_weight' => 'required|numeric|min:0|max:1',
            'is_featured' => 'required|boolean',
            'sort_order' => 'nullable|integer|min:0',
            'counter' => 'nullable|integer|min:0',
            'meta_title' => 'nullable|string|max:255',
            'meta_description' => 'nullable|string|max:500',
        ];
    }
}
